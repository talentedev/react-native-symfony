<?php
/*
 * This file has been automatically generated by doctrine.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Model;

use App\Exception\AppException;
use App\Model\Generated\AbstractSmSignIn;
use DateInterval;
use DateTimeImmutable;
use Exception;
use Safe\Exceptions\PcreException;
use function Safe\preg_match;

/**
 * The SmSignIn class maps the 'sms_sign_in' table in database.
 */
class SmSignIn extends AbstractSmSignIn
{
    public const MAX_FAILED_TIMES = 3;
    public const DELAY_FOR_NEW_CODE_REQUEST_IN_SECONDS = 58; // should be 60 but just to avoid some front err
    public const VALIDATION_TOKEN_EXPIRE_IN_MONTHS = 2; // 2 months

    /**
     * SmSignIn constructor.
     * @param string $phoneNumber
     * @throws AppException
     * @throws Exception
     */
    public function __construct(string $phoneNumber)
    {
        self::phoneNumberShouldBeValid($phoneNumber);
        parent::__construct($phoneNumber);
    }

    /**
     * @param string $fullPhoneNumber
     * @return bool
     * @throws AppException
     * @throws PcreException
     */
    public static function phoneNumberShouldBeValid(string $fullPhoneNumber): bool
    {
        if (!self::verifyPhoneNumber($fullPhoneNumber)) {
            throw new AppException("The phone number '$fullPhoneNumber' is invalid");
        }
        return true;
    }

    /**
     * @param string $fullPhoneNumber
     * @return bool
     * @throws PcreException
     */
    public static function verifyPhoneNumber(string $fullPhoneNumber): bool
    {
        return preg_match('^[+]*[(]{0,1}\d{1,4}[)]{0,1}[-\s\./0-9]*$^', $fullPhoneNumber) === 1;
    }

    /**
     * @param string $countryCore
     * @param string $number
     * @return SmSignIn
     * @throws AppException
     * @throws PcreException
     */
    public static function createWithCountryCodeAndNumber(string $countryCore, string $number): SmSignIn
    {
        $fullPhoneNumber = self::formatAndVerifyPhoneNumber($countryCore, $number);
        return new self($fullPhoneNumber);
    }

    /**
     * @param string $countryCode
     * @param string $number
     * @return string
     * @throws AppException
     * @throws PcreException
     */
    public static function formatAndVerifyPhoneNumber(string $countryCode, string $number): string
    {
        $countryCode = str_replace(' ', '', $countryCode);
        $number = str_replace(' ', '', $number);
        $fullPhoneNumber = $countryCode . ' ' . $number;
        if ($countryCode === '' || $number === '' || !self::verifyPhoneNumber($fullPhoneNumber)) {
            throw new AppException("The phone number '$fullPhoneNumber' is incorrect");
        }
        return $fullPhoneNumber;
    }

    /**
     * @throws Exception
     */
    public function setNewCodeRequestDateTimeFromNow(): void
    {
        $now = new DateTimeImmutable();
        $newCodeRequestDateTime = $now->add(new DateInterval('PT' . self::DELAY_FOR_NEW_CODE_REQUEST_IN_SECONDS . 'S'));
        $this->setNewCodeRequestDateTime($newCodeRequestDateTime);
    }

    /**
     * @throws Exception
     */
    public function setTokenExpireDateTimeFromNow(): void
    {
        $now = new DateTimeImmutable();
        $newCodeRequestDateTime = $now->add(new DateInterval('P' . self::VALIDATION_TOKEN_EXPIRE_IN_MONTHS . 'M'));
        $this->setTokenExpireDateTime($newCodeRequestDateTime);
    }

    public function hasVerificationTokenExpired(): bool
    {
        $tokenExpireDateTime = $this->getTokenExpireDateTime();
        return $tokenExpireDateTime === null || $tokenExpireDateTime < new DateTimeImmutable();
    }
}
