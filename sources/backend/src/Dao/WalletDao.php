<?php
/*
 * This file has been automatically generated by doctrine.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Dao;

use App\Dao\Generated\AbstractWalletDao;
use App\Model\Wallet;
use doctrine\doctrine\doctrineException;

/**
 * The WalletDao class will maintain the persistence of Wallet class into the wallets table.
 */
class WalletDao extends AbstractWalletDao
{
    /**
     * Add amount by default, amount should be positive
     *
     * @param Wallet $wallet
     * @param string|float $amount
     * @param bool $add
     * @return Wallet
     * @throws \Exception
     */
    public function atomicChanceBalanceAndSave(Wallet $wallet, $amount, bool $add = true) : Wallet
    {
        try {
            $updatedWallet = $this->getById($wallet->getUuid()); // Getting the most updated data
        } catch (doctrineException $e) {
            $this->save($wallet);
            $updatedWallet = $wallet;
        }
        $newBalance = $add ?
            number_format((float)$updatedWallet->getBalance() + (float)$amount, 2, '.', '')
            : number_format((float)$updatedWallet->getBalance() - (float)$amount, 2, '.', '');
        $updatedWallet->setBalance($newBalance);
        $updatedWallet->setUpdatedDate(new \DateTimeImmutable());
        $this->save($updatedWallet);
        return $updatedWallet;
    }
}
